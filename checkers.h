#ifndef CHECKERS_H
#define CHECKERS_H
#include <QString>

class Checkers
{
public:
    //-- Публичные методы - внешний интерфейс класса
    //-------------------------------------------------------------------------------------

    Checkers();                 // Конструктор
    void init();                // Инициализатор (сброс в начальное состояние)
    int getType(int i, int k);  // Выдача информации о текущих свойствах клетки
    void click(int i, int k);   // Обработка клика по клетке
    QString getMessage();       // Выдача текущего статусного сообщения


    //-- Публичные константы, описывающие значения отдельных битов свойства
    //-------------------------------------------------------------------------------------

    static const int black_empty_field = 0; // все флажки сброшены - пустая черная клетка
    static const int white_field = 1;       // белая или черная клетка
    static const int occupied_field = 2;    // занятая или свободная клетка
    static const int white_checker = 4;     // белая или черная шашка на клетке
    static const int dame = 8;              // дамка или простая шашка на клетке
    static const int selected_field = 16;   // выбрана ли клетка
    static const int bited_checker = 32;    // побита ли шашка в текущем ходе


    //-- Публичные константы, описывающие маски - комбинации отдельных битов свойства
    //-------------------------------------------------------------------------------------

    //для определения кисти при окраске фона клетки проверяем сразу два признака
    static const int brush_mask = white_field | selected_field;

    //для определения цвета находящейся на клетке шашки проверяем сразу три признака
    static const int checker_mask = occupied_field | white_checker | bited_checker;

    //для определения пустых клеток проверяем сразу два признака
    static const int empty_mask = occupied_field | white_field;

private:
    //-- Закрытые поля - внутреннее состояние объекта
    //-------------------------------------------------------------------------------------
    int position[8][8];         // Массив, хранящий всю информацию о текущей позиции
    int move_state;             // Состояние хода:
                                // 0 - шашка не выбрана,
                                // 1 - шашка выбрана, выбираем, куда она пойдет
                                // 2 - продолжается цепочка хода с боем шашек
    int move_order;             // Очередность хода - белые или черные
    bool game_ended;            // Признак завершения игры (когда нет ходов)
    bool must_bit;              // Признак наличия ходов с боем шашек (тихий ход делать нельзя)
    int error_code;             // Числовой код ошибки:
                                // 0 - нет ошибок,
                                // 1 - недопустимый ход, явное нарушение правил
                                // 2 - тихий ход запрещен, нужно бить шашку противника
                                // 3 - дамка после начала удара не может остановиться
                                //     в указанной клетке, так как нужно продолжать бой шашек

    int selectedI, selectedK;   // Координаты выбранной шашки

    //-------------------------------------------------------------------------------------
    //-- Закрытые методы - логика функционирования объекта
    //-------------------------------------------------------------------------------------

    // Процедура аналиа позиции после очередного хода
    // Проверяется налисие допустимых ходов
    // По результатам устанавливаются признаки game_ended и must_bit
    //-------------------------------------------------------------------------------------
    void testCurrentPosition();

    // Проверка возможности тихого хода из данной клетки
    //-------------------------------------------------------------------------------------
    bool canMove(int i, int k);

    // Проверка возможности тихого хода из данной клетки в даном направлении
    //-------------------------------------------------------------------------------------
    bool canMoveInDirection(int i, int k, int d);

    // Проверка возможности и выполнение тихого хода для пары клеток
    //-------------------------------------------------------------------------------------
    bool move(int i1, int k1, int i2, int k2);

    // Проверка возможности боя из данной клетки
    //-------------------------------------------------------------------------------------
    bool canBit(int i, int k);

    // Проверка возможности боя из данной клетки в даном направлении
    //-------------------------------------------------------------------------------------
    bool canBitInDirection(int i, int k, int d);

    // Проверка возможности и выполнение боя для пары клеток
    //-------------------------------------------------------------------------------------
    bool bit(int i1, int k1, int i2, int k2);

    // Проверка необходимости и выполнение превращения в дамки
    //-------------------------------------------------------------------------------------
    void convertIntoDame(int i, int k);

    // Удаление с доски шашек, побитых в течение хода
    //-------------------------------------------------------------------------------------
    void deleteBited();

    //-------------------------------------------------------------------------------------
    //-- Совсем мелкие служебные процедуры
    //-- для работы с координатами клеток и направлениями движения шашек
    //-------------------------------------------------------------------------------------

    // Вычисление горизонтальной координаты следующей клетки
    // в заданном направлении движения шашки
    //-------------------------------------------------------------------------------------
    int nextI(int i, int d);

    // Вычисление вертикальной координаты следующей клетки
    // в заданном направлении движения шашки
    //-------------------------------------------------------------------------------------
    int nextK(int k, int d);

    // Вычисление числового значения направлении движения шашки
    // по координатам начальной и конечной клетки
    //-------------------------------------------------------------------------------------
    int direction(int i1, int k1, int i2, int k2);

    // Проверка принципиальной допустимости движения шашки
    // по координатам начальной и конечной клетки
    // (нахождение клеток на одной диагонали)
    //-------------------------------------------------------------------------------------
    bool valid(int i1, int k1, int i2, int k2);
};

#endif // CHECKERS_H
